/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertTrue;

@RunWith(Parameterized.class)
public class OntoFoxInputParserTest {

    private OntoFoxInputParser parser = null;

    @Parameterized.Parameter
    public String inputFilename = null;

    //The rest of the parameters are provided to build the assertions when testing
    @Parameterized.Parameter (value = 1)
    public String uri = null;

    @Parameterized.Parameter(value = 2)
    public String sourceOntology = null;

    @Parameterized.Parameter(value = 3)
    public int lowerURIsSize;

    @Parameterized.Parameter(value = 4)
    public int upperURIsSize;

    @Parameterized.Parameter(value = 5)
    public String sourceRetrievalSetting = null;

    @Parameterized.Parameter(value = 6)
    public int sourceAnnotationURIsSize;

    @Parameterized.Parameter(value =7)
    public String sourceAnnotationSetting = null;


    @Parameterized.Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(
                new Object[][] {
                { "/ontofoxInputUO.txt",
                  "http://purl.obolibrary.org/obo/MSIO_UO_import.owl", "UO",
                   18,
                   1,
                   "includeNoIntermediates",
                   0,
                   "includeAllAnnotationProperties"
                },
                { "/input1.txt",
                  "http://purl.obolibrary.org/obo/example.owl",
                  "NCBITaxon",
                  1,
                  2,
                  "includeAllIntermediates",
                  3,
                  null
                },
                {
                  "/ontofoxInput-OBI-processes.txt",
                  "http://purl.obolibrary.org/obo/MSIO_OBI_import.owl",
                  "OBI",
                  116,
                  1,
                  "includeAllIntermediates",
                  0,
                  "includeAllAxiomsRecursively"
                },
//                {
//                    "/ontofoxInputIAO.txt",
//                        "http://purl.obolibrary.org/obo/MSIO_IAO_import.owl",
//                        "OBI",
//                        3,
//                        0,
//                        "includeAllIntermediates",
//                        0,
//                        "includeAllAxioms"
//                }

        });
    }


    @Before
    public void setUp() throws IOException {
        parser = new OntoFoxInputParser(getClass().getResource(inputFilename).getPath());
        parser.parse();
    }

    @Test
    public void testParsingURI(){
        assertTrue("paser.getURI() should not be null", parser.getOntoFoxInput().getURI() !=null );
        assertTrue("paser.getURI() has specific value", parser.getOntoFoxInput().getURI().equals(uri) );
    }

    @Test
    public void testParsingSourceOntology() throws IOException {
        assertTrue("paser.getSourceOntology() should not be null", parser.getOntoFoxInput().getSourceOntology() !=null );
        assertTrue("paser.getSourceOntolgy() has specific value", parser.getOntoFoxInput().getSourceOntology().equals(sourceOntology) );
    }

    @Test
    public void testParsingLowerIRIs() throws IOException {
        assertTrue("paser.getLowerIRIs() should not be null", parser.getOntoFoxInput().getLowerIRIs() !=null );
        assertTrue("paser.getLowerIRIs() has specific value", parser.getOntoFoxInput().getLowerIRIs().size()==lowerURIsSize );

    }

    @Test
    public void testParsingUpperRIs() throws IOException {
        assertTrue("paser.getUpperIRIs() should not be null", parser.getOntoFoxInput().getUpperIRIs() !=null );
        assertTrue("paser.getUpperIRIs() has specific value", parser.getOntoFoxInput().getUpperIRIs().size()== upperURIsSize);

    }

    @Test
    public void testParsingSourceRetrievalSetting() throws IOException {
        assertTrue("paser.getSourceRetrievalSetting() should not be null", parser.getOntoFoxInput().getSourceRetrievalSetting() !=null );
        assertTrue("paser.getSourceRetrievalSetting() has specific value", parser.getOntoFoxInput().getSourceRetrievalSetting().equals(sourceRetrievalSetting));
    }


    @Test
    public void testParsingSourceAnnotationURIsORSourceAnnotationSetting() throws IOException {
        if (parser.getOntoFoxInput().getSourceAnnotationSetting() == null) {

            assertTrue("paser.getSourceAnnotationURIs() should not be null", parser.getOntoFoxInput().getSourceAnnotationURIs() != null);
            assertTrue("paser.getSourceAnnotationURIs() has specific size", parser.getOntoFoxInput().getSourceAnnotationURIs().size() == sourceAnnotationURIsSize);

        } else {

            assertTrue("paser.getSourceAnnotationSetting() should not be null", parser.getOntoFoxInput().getSourceAnnotationSetting() !=null );
            assertTrue("paser.getSourceAnnotationSetting() has specific value", parser.getOntoFoxInput().getSourceAnnotationSetting().equals(sourceAnnotationSetting));

        }

    }

}
